## rename this file `secrets.mk` and customise it to reflect your system-dependent
## secrets

# if you keep a cache of singularity images, this will enable re-use of the file
SINGULARITY_ROOT = .

# if you have a shared renv cache
RENV_PATHS_ROOT = ~/.cache/R/renv
# A prefix to keep rocker-required packages together
RENV_PATHS_PREFIX=rocker


babsfile := $(shell x=`pwd`; while [ "$$x" != "/" ]; do  if [ -f "$$x"/.babs ]; then echo "$$x"/.babs; break; else x=`dirname "$$x"`; fi; done)
ifdef babsfile
babsfield = $(shell sed -n  "s/ *$(1): *//p" $(babsfile))
.bp := $(subst /, ,$(call babsfield,Path))
.myname = $(subst @crick.ac.uk,,$(shell $(GIT) config --global user.email || echo $(USER)))
redirect_outputs = /nemo/stp/babs/outputs/$(word 7, $(.bp))/$(word 8,$(.bp))/$(.myname)/$(word 9, $(.bp))
babs_userpath := $(patsubst /camp%,/nemo%,$(subst /working/bioinformatics/,/working/$(USER)/,$(call babsfield,Path)))
redirect_intranet = $(subst /working/,/www/html/internal/users/,$(babs_userpath))
redirect_internet = $(subst /working/,/www/html/external/users/,$(babs_userpath))
url_intranet = $(patsubst /nemo/stp/babs/www/html/internal%,https://bioinformatics.thecrick.org%,$(redirect_intranet))
url_internet = $(patsubst /nemo/stp/babs/www/html/external%,https://bioinformatics.crick.ac.uk%,$(redirect_internet))
babs_type := $(call babsfield, Type)
repo=https://github.com/BABS-STP/$(babsid)

.PHONY: update-pipeline get-pipeline
TEMPLATE_DIR = /nemo/stp/babs/working/bioinformatics/templates

ifeq ($(version),)
targz=$(TEMPLATE_DIR)/$(babs_type).tar.gz
genericgz = $(TEMPLATE_DIR)/generic.tar.gz
else
targz=$(TEMPLATE_DIR)/archive/$(babs_type)-$(version).tar.gz
genericgz=$(TEMPLATE_DIR)/archive/generic-$(version).tar.gz
endif

get-pipeline: update-pipeline
	true

update-pipeline: ## Update the pipeline
	if [ -f "$(targz)" ]; then \
	  $(GIT_OK) stash -m "Stashing state prior to pipeline update" &&\
	  tar -xzf $(targz) -C `echo $(CURDIR) | sed 's,\(.*\)/babs.*,\1/,'` ;\
	else \
	  if [ -d "$(subst .tar.gz,,$(targz))" ]; then \
	    $(GIT) stash -m "Stashing state prior to pipeline update" &&\
	    rsync -avzp $(subst .tar.gz,,$(targz))  .. ;\
	  else \
	    echo "$(babs_type) $(version) does not exist" ;\
	  fi \
	fi

update-module: module=$(notdir $(CURDIR))
update-module: ## Update the specific module you're currently using.
	if [ $(module) != babs ] ;then \
	  if [ -f "$(targz)" ]; then \
	    $(GIT_OK) stash -m "Stashing state prior to pipeline update" &&\
	    tar -xzf $(targz) babs/$(module) --strip-components=2 ;\
	  else \
	    if [ -d "$(subst .tar.gz,,$(targz))" ]; then \
	      $(GIT_OK) stash -m "Stashing state prior to pipeline update" &&\
	      rsync -avzp $(subst .tar.gz,,$(targz))/babs/$(module)  . ;\
	    else \
	      echo "$(babs_type) $(version) does not exist" ;\
	    fi \
	  fi \
	else \
	  echo "Not in a module, so don't know what to update" ;\
	fi

update-pm: ## Update the project management scripts
	$(GIT_OK) stash -m "Stashing state prior to updating .github"
	if [ -f "$(genericgz)" ]; then \
	  tar -xzf $(generic) -C `echo $(CURDIR) | sed 's|\(.*\)/babs/.*|\1/|'` .github;\
	else \
	  rsync -avzp $(TEMPLATE_DIR)/generic/.github/ `echo $(CURDIR) | sed 's|\(.*\)/babs/.*|\1/|'` ;\
	fi

endif
